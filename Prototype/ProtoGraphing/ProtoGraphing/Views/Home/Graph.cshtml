@{
    ViewBag.Title = "Graph";
}

<h2>Prototype Graphing with D3.js</h2>
<p>The following shows my working through the examples found in the D3.js 'Bar Chart' tutorial, detailed here <a href="http://mbostock.github.com/d3/tutorial/bar-1.html" title="A Bar Chart, Part 1">A Bar Chart, Part 1</a>
and here <a href="http://mbostock.github.com/d3/tutorial/bar-2.html" title="A Bar Chart, Part 2">A Bar Chart, Part 2</a></p>

<h3>1. An HTML bar chart example, using a fixed data array.</h3>
    
<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("div")
        .attr("class", "chart");

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range(["0px", "420px"]);

    chart.selectAll("div")
        .data(data)
        .enter().append("div")
        .style("width", x)
        .text(String);

</script>

<p>Now, the HTML representation is very concise, but it’s not very flexible. Displaying reference lines in the background, or generating columns rather than bars, is difficult in pure HTML. Chart types such as pies and streamgraphs are practically impossible. Fortunately, there’s a convenient alternative: Scalable Vector Graphics (SVG)!</p>

<h3>2. A more flexible SVG example, also using a fixed data array.</h3>

<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("svg")
        .attr("class", "chart")
        .attr("width", 420)
        .attr("height", 20 * data.length);

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range([0, 420]);

    var y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, 120]);

    chart.selectAll("rect")
        .data(data)
        .enter().append("rect")
        .attr("y", y)
        .attr("width", x)
        .attr("height", 20);

</script>

<h3>..with labels and reference lines, still using a fixed data array.</h3>

<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("svg")
        .attr("class", "chart")
        .attr("width", 440)
        .attr("height", 140)
        .append("g")
        .attr("transform", "translate(10,15)");

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range([0, 420]);

    var y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, 120]);

    chart.selectAll("rect")
        .data(data)
        .enter().append("rect")
        .attr("y", y)
        .attr("width", x)
        .attr("height", 20);

    chart.selectAll("text")
        .data(data)
        .enter().append("text")
        .attr("class", "bar")
        .attr("x", x)
        .attr("y", function (d) { return y(d) + y.rangeBand() / 2; })
        .attr("dx", -3) // padding-right
        .attr("dy", ".35em") // vertical-align: middle
        .attr("text-anchor", "end") // text-align: right
        .text(String);

    chart.selectAll("line")
        .data(x.ticks(10))
        .enter().append("line")
        .attr("x1", x)
        .attr("x2", x)
        .attr("y1", 0)
        .attr("y2", 120)
        .style("stroke", "#ccc");

    chart.selectAll(".rule")
        .data(x.ticks(10))
        .enter().append("text")
        .attr("class", "rule")
        .attr("x", x)
        .attr("y", 0)
        .attr("dy", -3)
        .attr("text-anchor", "middle")
        .text(String);

    chart.append("line")
        .attr("y1", 0)
        .attr("y2", 120)
        .style("stroke", "#000");

</script>

<h3>3. Dynamic data with SVG</h3>