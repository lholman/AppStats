@{
    ViewBag.Title = "Graph";
}

<h2>Prototype Graphing with D3.js</h2>
<p>The following shows my working through the examples found in the D3.js 'Bar Chart' tutorial, the basics here <a href="http://mbostock.github.com/d3/tutorial/bar-1.html" title="A Bar Chart, Part 1">A Bar Chart, Part 1</a>
and more advanced dynamic data here <a href="http://mbostock.github.com/d3/tutorial/bar-2.html" title="A Bar Chart, Part 2">A Bar Chart, Part 2</a></p>

<h3>1. An HTML bar chart example, using a fixed data array.</h3>
    
<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("div")
        .attr("class", "chart");

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range(["0px", "420px"]);

    chart.selectAll("div")
        .data(data)
        .enter().append("div")
        .style("width", x)
        .text(String);

</script>

<p>Now, the HTML representation is very concise, but it’s not very flexible. Displaying reference lines in the background, or generating columns rather than bars, is difficult in pure HTML. Chart types such as pies and streamgraphs are practically impossible. Fortunately, there’s a convenient alternative: Scalable Vector Graphics (SVG)!</p>

<h3>2. A more flexible SVG example, also using a fixed data array.</h3>

<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("svg")
        .attr("class", "chart")
        .attr("width", 420)
        .attr("height", 20 * data.length);

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range([0, 420]);

    var y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, 120]);

    chart.selectAll("rect")
        .data(data)
        .enter().append("rect")
        .attr("y", y)
        .attr("width", x)
        .attr("height", 20);

</script>

<h3>..with labels and reference lines, still using a fixed data array.</h3>

<script type="text/javascript">

    var data = [4, 8, 15, 16, 23, 42];
    var chart = d3.select("div#main").append("svg")
        .attr("class", "chart")
        .attr("width", 440)
        .attr("height", 140)
        .append("g")
        .attr("transform", "translate(10,15)");

    var x = d3.scale.linear()
        .domain([0, d3.max(data)])
        .range([0, 420]);

    var y = d3.scale.ordinal()
        .domain(data)
        .rangeBands([0, 120]);

    chart.selectAll("rect")
        .data(data)
        .enter().append("rect")
        .attr("y", y)
        .attr("width", x)
        .attr("height", 20);

    chart.selectAll("text")
        .data(data)
        .enter().append("text")
        .attr("class", "bar")
        .attr("x", x)
        .attr("y", function (d) { return y(d) + y.rangeBand() / 2; })
        .attr("dx", -3) // padding-right
        .attr("dy", ".35em") // vertical-align: middle
        .attr("text-anchor", "end") // text-align: right
        .text(String);

    chart.selectAll("line")
        .data(x.ticks(10))
        .enter().append("line")
        .attr("x1", x)
        .attr("x2", x)
        .attr("y1", 0)
        .attr("y2", 120)
        .style("stroke", "#ccc");

    chart.selectAll(".rule")
        .data(x.ticks(10))
        .enter().append("text")
        .attr("class", "rule")
        .attr("x", x)
        .attr("y", 0)
        .attr("dy", -3)
        .attr("text-anchor", "middle")
        .text(String);

    chart.append("line")
        .attr("y1", 0)
        .attr("y2", 120)
        .style("stroke", "#000");

</script>

<h3>3. An animated SVG example using dynamic data.</h3>
<p>These examples construct a fake dataset by <a href="http://en.wikipedia.org/wiki/Random_walk" title="random walk">random walk</a>.  More implementation detail here <a href="http://mbostock.github.com/d3/tutorial/bar-2.html#dynamic_data" title="A Bar Chart, Part 2 - Dynamic Data">A Bar Chart, Part 2 - Dynamic Data</a>. 
These examples are very relevant to visualisation of time-series data.</p>

<script type="text/javascript">

var t = 1297110663, // start time (seconds since epoch)
    v = 70, // start value (subscribers)
    data = d3.range(33).map(next); // starting dataset
 
function next() {
    return {
        time: ++t,
        value: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
    };
}

setInterval(function() {
    data.shift();
    data.push(next());
    redraw();
}, 1500);

var w = 20,
    h = 80;

var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, w]); 

var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, h]);

var chart = d3.select("div#main").append("svg")
    .attr("class", "chart")
    .attr("width", w * data.length - 1)
    .attr("height", h);

chart.selectAll("rect")
    .data(data)
    .enter().append("rect")
    .attr("x", function (d, i) { return x(i) - .5; })
    .attr("y", function (d) { return h - y(d.value) - .5; })
    .attr("width", w)
    .attr("height", function (d) { return y(d.value); });

chart.append("line")
    .attr("x1", 0)
    .attr("x2", w * data.length)
    .attr("y1", h - .5)
    .attr("y2", h - .5)
    .style("stroke", "#000");

function redraw() {
    // Update…
    chart.selectAll("rect")
        .data(data)
        .transition()
        .duration(1000)
        .attr("y", function(d) { return h - y(d.value) - .5; })
        .attr("height", function(d) { return y(d.value); });
}

</script>

<p>To quote directly from the tutorial "The redraw function is fairly trivial—reselect the rect elements, bind them to the new data, and then start a transition that updates the “y” and “height” attributes. No enter and exit selection is needed! Without a data join, the data are joined to nodes by index. As the length of the data array is fixed, the number of nodes never changes, and thus the enter and exit selections are always empty."</p>

<h3>4. An animated SVG example using dynamic data with object constancy.</h3>
<p>...and to quote again "Yet, the above animation is poor because it lacks object constancy through the transition: it does not convey the changing data accurately. Rather than updating values in-place, the bars should slide to the left, so that each bar corresponds to the same point in time across the transition. Do this using a data join, to bind nodes to data by timestamp rather than index:"</p>

<script type="text/javascript">

    var t = 1297110663, // start time (seconds since epoch)
    v = 70, // start value (subscribers)
    data = d3.range(33).map(next); // starting dataset

    function next() {
        return {
            time: ++t,
            value: v = ~ ~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
        };
    }

    setInterval(function () {
        data.shift();
        data.push(next());
        redraw();
    }, 1500);

    var w = 20,
    h = 80;

    var x = d3.scale.linear()
    .domain([0, 1])
    .range([0, w]);

    var y = d3.scale.linear()
    .domain([0, 100])
    .rangeRound([0, h]);

    var chart = d3.select("div#main").append("svg")
    .attr("class", "chart")
    .attr("width", w * data.length - 1)
    .attr("height", h);

    chart.selectAll("rect")
    .data(data)
    .enter().append("rect")
    .attr("x", function (d, i) { return x(i) - .5; })
    .attr("y", function (d) { return h - y(d.value) - .5; })
    .attr("width", w)
    .attr("height", function (d) { return y(d.value); });

    chart.append("line")
    .attr("x1", 0)
    .attr("x2", w * data.length)
    .attr("y1", h - .5)
    .attr("y2", h - .5)
    .style("stroke", "#000");

    function redraw() {
        // Update…
        chart.selectAll("rect")
        .data(data)
        .transition()
        .duration(1000)
        .attr("y", function (d) { return h - y(d.value) - .5; })
        .attr("height", function (d) { return y(d.value); });
    }

</script>
